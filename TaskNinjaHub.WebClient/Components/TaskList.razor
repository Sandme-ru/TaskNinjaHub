@page "/catalog-tasks"
@inject IStringLocalizer<TaskList> Localizer

<PageTitle>@Localizer["TaskListTitle"]</PageTitle>

<div class="filter-box">
    <Space Style="width: 100%; justify-content: stretch;" Direction="DirectionVHType.Horizontal">
        <SpaceItem Style="width: 100%">
            <Input min="0"
                   Type="number"
                       Placeholder="@Localizer["TaskListTaskNumber"]"
                   AllowClear
                   @bind-Value="@SelectedTaskId"
                   OnChange="new EventCallback<int?>(this, async () => await FilterSelectionChanged())" />
        </SpaceItem>
        <SpaceItem Style="width: 100%">
            <Select DataSource="@Authors"
                    LabelName="@nameof(Author.ShortName)"
                     Placeholder="@Localizer["TaskListAuthor"]"
                    AllowClear
                    EnableSearch
                    @bind-Value="@SelectedAuthor"
                    OnSelectedItemChanged="new EventCallback<Author>(this, async () => await FilterSelectionChanged())">
            </Select>
        </SpaceItem>
        <SpaceItem Style="width: 100%">
            <Select DataSource="@Authors"
                    LabelName="@nameof(Author.ShortName)"
                         Placeholder="@Localizer["TaskListExrcuter"]"
                    AllowClear
                    EnableSearch
                    @bind-Value="@SelectedExecutor"
                    OnSelectedItemChanged="new EventCallback<Author>(this, async () => await FilterSelectionChanged())">
            </Select>
        </SpaceItem>
        <SpaceItem Style="width: 100%">
            <Select DataSource="@InformationSystems"
                    LabelName="@nameof(InformationSystem.Name)"
                         Placeholder="@Localizer["TaskListSystem"]"
                    AllowClear
                    EnableSearch
                    @bind-Value="@SelectedInformationSystem"
                    OnSelectedItemChanged="new EventCallback<InformationSystem>(this, async () => await FilterSelectionChanged())">
            </Select>
        </SpaceItem>
    </Space>
</div>

<Divider />

<div style="text-align: center;">
                 <span style="font-size: larger;">@Localizer["TaskListRecord"]: </span>
    <span class="badge bg-primary">@CatalogTasksCount</span>
</div>

<Divider />

<Loading Spinning="IsLoadingTaskList">
    <div class="task-list">
        <AntList Grid="_grid" DataSource="@CatalogTasks">
            <ListItem>
                <Card Bordered Title="@($"[{context.Id}] {context.Name}")" Id="MainCard">
                    <Extra>
                         <Popover Title="@Localizer["TaskListReadTask"]">
                            <Icon class="maincardIcon" Type="up-circle" Theme="fill" @onclick="async (_) => await Open(context)" />
                        </Popover>
                         <Popover Title="@Localizer["TaskListEditTask"]">
                            <Icon class="maincardIcon" Type="edit" Theme="fill" @onclick="async () => await EditTaskEnabled(context)" />
                        </Popover>
                         <Popconfirm Title="@Localizer["TaskListDelete"]" OnConfirm="@(async () => DeleteTaskHandler())">
                            <Icon class="maincardIcon" Type="delete" Theme="fill" @onclick="async () => DeleteTask(context)" />
                        </Popconfirm>
                    </Extra>
                    <Body>
                        <div>
                            <Descriptions Bordered>
                                <Paragraph>
                                    @if (context.Description is { Length: > 20 })
                                    {
                                        @context.Description[..20]
                                        <a style="cursor: default; color: black">...</a>
                                    }
                                    else
                                    {
                                        @context.Description
                                    }
                                </Paragraph>
                            </Descriptions>
                            <Paragraph style="padding-top: 0.2em">
                                <Popover Title="@context.TaskAuthor?.Name">
                                    <Avatar Size="small">U</Avatar>
                                </Popover>
                                <Popover Title="@context.TaskType?.Name">
                                    @switch (context.TaskTypeId)
                                    {
                                        case (int)EnumTaskType.Bug:
                                            <Icon Type="bug" Theme="outline" />
                                            break;
                                        case (int)EnumTaskType.Feature:
                                            <Icon Type="file-add" Theme="outline" />
                                            break;
                                        case (int)EnumTaskType.Epic:
                                            <Icon Type="crown" Theme="outline"/>
                                            break;
                                        case (int)EnumTaskType.Testing:
                                            <Icon Type="trophy" Theme="outline" />
                                            break;
                                        case (int)EnumTaskType.Task:
                                            <Icon Type="container" Theme="outline" />
                                            break;
                                        case (int)EnumTaskType.Requirement:
                                            <Icon Type="file-done" Theme="outline" />
                                            break;
                                    }
                                </Popover>
                                <PriorityIcon PriorityName="@context.Priority?.Name"/>
                                <TaskStatusIcon TaskStatusName="@context.TaskStatus?.Name"/>
                                @if (context.Files is not null and { Count: > 0 })
                                {
                                    <Popover Title="@Localizer["TaskListEditFiles"]">
                                        <Icon Type="file" Theme="outline" @onclick="async (_) => await Open(context)" />
                                    </Popover>
                                }
                            </Paragraph>
                        </div>
                    </Body>
                </Card>
            </ListItem>
        </AntList>

        <Pagination Total="@CatalogTasksCount"
                    PageSize="@PageSize"
                    Current="@CurrentPage"
                    ShowSizeChanger="true"
                    OnChange="HandlePageChange" />
    </div>
</Loading>

@if (EditedTask != null)
{
    <Modal Title="@Localizer["TaskListEditTitlre"]"
           Visible="@_visibleModal"
           OnOk="@SaveEditedTask"
           OnCancel="@HandleCancel">
        <Form Model="@EditedTask"
              LabelColSpan="8"
              WrapperColSpan="16">
            <FormItem>
                <Input Type="hidden" @bind-Value="@context.Id" />
            </FormItem>
            <FormItem Label="@Localizer["TaskListEditName"]">
                <Input Type="text" @bind-Value="@context.Name" />
            </FormItem>
            <FormItem Label="@Localizer["TaskListEditDescription"]">
                <TextArea @bind-Value="@context.Description"></TextArea>
            </FormItem>
            <FormItem Label="@Localizer["TaskListEditAuthor"]">
                <Input @bind-Value="@CurrentUser" Disabled />
            </FormItem>
             <FormItem Label="@Localizer["TaskListEditExecutor"]">
                <Select Mode="default"
                        EnableSearch
                        DataSource="@Authors"
                        @bind-Value="@context.TaskExecutorId"
                        LabelName="@nameof(Author.Name)"
                        ValueName="@nameof(Author.Id)">
                </Select>
            </FormItem>
                 <FormItem Label="@Localizer["TaskListEditPriority"]">
                <Select Mode="default"
                        EnableSearch
                        DataSource="@Priorities"
                        @bind-Value="@context.PriorityId"
                        LabelName="@nameof(Priority.Name)"
                        ValueName="@nameof(Priority.Id)">
                </Select>
            </FormItem>
                 <FormItem Label="@Localizer["TaskListEditIS"]">
                <Select Mode="default"
                        EnableSearch
                        DataSource="@InformationSystems"
                        @bind-Value="@context.InformationSystemId"
                        LabelName="@nameof(InformationSystem.Name)"
                        ValueName="@nameof(InformationSystem.Id)">
                </Select>
            </FormItem>
                 <FormItem Label="@Localizer["TaskListEditType"]">
                <Select Mode="default"
                        EnableSearch
                        DataSource="@TaskTypes"
                        @bind-Value="@context.TaskTypeId"
                        LabelName="@nameof(CatalogTaskType.Name)"
                        ValueName="@nameof(CatalogTaskType.Id)">
                </Select>
            </FormItem>
                 <FormItem Label="@Localizer["TaskListEditStatus"]">
                <Select Mode="default"
                        EnableSearch
                        DataSource="@TaskStatuses"
                        @bind-Value="@context.TaskStatusId"
                        LabelName="@nameof(CatalogTaskStatus.Name)"
                        ValueName="@nameof(CatalogTaskStatus.Id)">
                </Select>
            </FormItem>
                 <FormItem Label="@Localizer["TaskListEditRelatedTasks"]">
                <Select Mode="multiple"
                        DataSource="@Tasks"
                        EnableSearch
                        @bind-Values="@RelatedTaskIds"
                        LabelName="@nameof(CatalogTask.Name)"
                        ValueName="@nameof(CatalogTask.Id)">
                </Select>
            </FormItem>
                     <FormItem Label="@Localizer["TaskListEditDocuments"]">
                <Upload Action="https://www.mocky.io/v2/5cc8019d300000980a055e76"
                        Name="file"
                        ShowButton="false"
                        @bind-FileList="DefaultFileList"
                        ListType="picture-card"
                        OnPreview="(file)=> { 
                          if (file.IsPicture()){
                              PreviewVisible = true;
                              PreviewTitle = file.FileName;
                              ImgUrl = file.Url;
                          }
                          else
                              NavigationManager.NavigateTo(file.Url); 
                        }">
                </Upload>
                <Modal Visible="PreviewVisible"
                       Title="@PreviewTitle"
                       OnCancel="() => PreviewVisible = false"
                       OnOk="() => NavigationManager.NavigateTo(ImgUrl)"
                            OkText="@Localizer["TaskListEditDownload"].Value"
                            CancelText="@Localizer["TaskListEditCancle"].Value">
                    <img style="width: 100%" src="@ImgUrl"/>
                </Modal>
            </FormItem>
                     <FormItem Label="@Localizer["TaskListEditUpload"]">
                <InputFile multiple OnChange="HandleFileSelected" />
            </FormItem>
        </Form>
    </Modal>
}

<Modal Footer="null"
       Visible="IsPreviewVisible"
       Title="@FilePreviewTitle"
       OnCancel="() => IsPreviewVisible = false">
    <img style="width: 100%" src="@FilePreviewUrl" alt="" />
</Modal>

<Divider />

<Loading Spinning="IsLoadingTaskList">
    <div style="text-align: center;">
        <Button Type="@ButtonType.Primary" Icon="@IconType.Outline.Search" @onclick="TrainModel">@Localizer["TaskListTrainModel"]</Button>
    </div>
</Loading>

<Divider />

@code {
    private RenderFragment _icon = @<Icon Type="exclamation-circle" Theme="outline"></Icon>;
}