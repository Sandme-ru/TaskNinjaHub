@page "/catalog-tasks"

<PageTitle>Catalog tasks</PageTitle>

<div class="filter-box">
    <Space Style="width: 100%; justify-content: stretch;" Direction="DirectionVHType.Horizontal">
        <SpaceItem Style="width: 100%">
            <Input min="0"
                   Type="number"
                   Placeholder="Enter task number"
                   AllowClear
                   @bind-Value="@SelectedTaskId"
                   OnChange="new EventCallback<int?>(this, async () => await FilterSelectionChanged())" />
        </SpaceItem>
        <SpaceItem Style="width: 100%">
            <Select DataSource="@AuthorsList"
                    LabelName="@nameof(Author.ShortName)"
                    Placeholder="Choose author"
                    AllowClear
                    EnableSearch
                    @bind-Value="@SelectedAuthor"
                    OnSelectedItemChanged="new EventCallback<Author>(this, async () => await FilterSelectionChanged())">
            </Select>
        </SpaceItem>
        <SpaceItem Style="width: 100%">
            <Select DataSource="@AuthorsList"
                    LabelName="@nameof(Author.ShortName)"
                    Placeholder="Choose executor"
                    AllowClear
                    EnableSearch
                    @bind-Value="@SelectedExecutor"
                    OnSelectedItemChanged="new EventCallback<Author>(this, async () => await FilterSelectionChanged())">
            </Select>
        </SpaceItem>
        <SpaceItem Style="width: 100%">
            <Select DataSource="@InformationSystemList"
                    LabelName="@nameof(InformationSystem.Name)"
                    Placeholder="Choose system"
                    AllowClear
                    EnableSearch
                    @bind-Value="@SelectedInformationSystem"
                    OnSelectedItemChanged="new EventCallback<InformationSystem>(this, async () => await FilterSelectionChanged())">
            </Select>
        </SpaceItem>
    </Space>
</div>

<Divider />

<div style="text-align: center;">
    <span style="font-size: larger;">Records count: </span>
    <span class="badge bg-primary">@CatalogTasksCount</span>
</div>

<Divider />

<Loading Spinning="IsLoadingTaskList">
    <div class="task-list">
        <AntList Grid="_grid" DataSource="@CatalogTasks">
            <ListItem>
                <Card Bordered Title="@($"{context.Id.ToString()}. {context.TaskAuthor?.Name}")" Id="MainCard">
                    <Extra>
                        <Popover Title="Read task">
                            <Icon class="maincardIcon" Type="up-circle" Theme="fill" @onclick="async (_) => await Open(context)" />
                        </Popover>
                        <Popover Title="Edit task">
                            <Icon class="maincardIcon" Type="edit" Theme="fill" OnClick="async () => await EditTaskEnabled(context)" />
                        </Popover>
                        <Popover Title="Delete task">
                            <Icon class="maincardIcon" Type="delete" Theme="fill" OnClick="async () => DeleteTask(context)" />
                        </Popover>
                    </Extra>
                    <Body>
                        <div>
                            <Descriptions Bordered>
                                <Paragraph Copyable>
                                    @if (context.Name!.Length > 20)
                                    {
                                        @context.Name.Substring(0, 20)
                                        <a style="cursor: default; color: black">...</a>
                                    }
                                    else
                                    {
                                        @context.Name
                                    }
                                </Paragraph>
                            </Descriptions>
                            <Paragraph style="padding-top: 0.2em">
                                <Popover Title="@context.TaskAuthor?.Name">
                                    <Avatar Size="small">U</Avatar>
                                </Popover>
                                <PriorityIcon PriorityName="@context.Priority?.Name"></PriorityIcon>
                                <TaskStatusIcon TaskStatusName="@context.TaskStatus?.Name"></TaskStatusIcon>
                                @if (context.Files is not null and { Count: > 0 })
                                {
                                    <Popover Title="Files">
                                        <Icon Type="file" Theme="outline" @onclick="async (_) => await Open(context)" />
                                    </Popover>
                                }
                            </Paragraph>
                        </div>
                    </Body>
                </Card>
            </ListItem>
        </AntList>

        <Pagination Total="@CatalogTasksCount"
                    PageSize="@PageSize"
                    Current="@CurrentPage"
                    ShowSizeChanger="true"
                    OnChange="HandlePageChange" />
    </div>
</Loading>

@if (EditedTask != null)
{
    <Modal Title="EDIT TASK"
           Visible="@_visibleModal"
           OnOk="@SaveEditedTask"
           OnCancel="@HandleCancel">
        <Form Model="@EditedTask"
              LabelColSpan="8"
              WrapperColSpan="16">
            <FormItem>
                <Input Type="hidden" @bind-Value="@context.Id" />
            </FormItem>
            <FormItem Label="Name">
                <Input Type="text" @bind-Value="@context.Name" />
            </FormItem>
            <FormItem Label="Description">
                <TextArea @bind-Value="@context.Description"></TextArea>
            </FormItem>
            <FormItem Label="Task author">
                <Input @bind-Value="@CurrentUser" Disabled />
            </FormItem>
            <FormItem Label="Task executor">
                <Select Mode="default"
                        EnableSearch
                        DataSource="@AuthorsList"
                        @bind-Value="@context.TaskExecutorId"
                        LabelName="@nameof(Author.Name)"
                        ValueName="@nameof(Author.Id)">
                </Select>
            </FormItem>
            <FormItem Label="Priority">
                <Select Mode="default"
                        EnableSearch
                        DataSource="@PriorityList"
                        @bind-Value="@context.PriorityId"
                        LabelName="@nameof(Priority.Name)"
                        ValueName="@nameof(Priority.Id)">
                </Select>
            </FormItem>
            <FormItem Label="Information system">
                <Select Mode="default"
                        EnableSearch
                        DataSource="@InformationSystemList"
                        @bind-Value="@context.InformationSystemId"
                        LabelName="@nameof(Priority.Name)"
                        ValueName="@nameof(Priority.Id)">
                </Select>
            </FormItem>
            <FormItem Label="Task status">
                <Select Mode="default"
                        EnableSearch
                        DataSource="@TaskStatusList"
                        @bind-Value="@context.TaskStatusId"
                        LabelName="@nameof(CatalogTaskStatus.Name)"
                        ValueName="@nameof(CatalogTaskStatus.Id)">
                </Select>
            </FormItem>
            <FormItem Label="Related tasks">
                <Select Mode="multiple"
                        DataSource="@CatalogTaskList"
                        EnableSearch
                        @bind-Values="@RelatedTaskIds"
                        LabelName="@nameof(CatalogTask.Name)"
                        ValueName="@nameof(CatalogTask.Id)">
                </Select>
            </FormItem>
            <FormItem Label="Загруженные фото:">
                <Upload Action="https://www.mocky.io/v2/5cc8019d300000980a055e76"
                        Name="file"
                        OnRemove="(_) => Task.FromResult(false)"
                        ShowButton="false"
                        @bind-FileList="DefaultFileList"
                        ListType="picture-card"
                        OnPreview="(file)=> { 
                          if (file.IsPicture()){
                              PreviewVisible = true;
                              PreviewTitle = file.FileName;
                              ImgUrl = file.Url;
                          }
                          else
                              NavigationManager.NavigateTo(file.Url); 
                        }">
                </Upload>
                <Modal Visible="PreviewVisible"
                       Title="@PreviewTitle"
                       OnCancel="() => PreviewVisible = false"
                       OnOk="() => NavigationManager.NavigateTo(ImgUrl)"
                       OkText="@("Download")"
                       CancelText="@("Cancle")">
                    <img style="width: 100%" src="@ImgUrl"/>
                </Modal>
            </FormItem>
            <FormItem Label="Фото">
                <InputFile multiple OnChange="HandleFileSelected" />
            </FormItem>
        </Form>
    </Modal>
}

<Modal Footer="null"
       Visible="IsPreviewVisible"
       Title="@FilePreviewTitle"
       OnCancel="() => IsPreviewVisible = false">
    <img style="width: 100%" src="@FilePreviewUrl" alt="" />
</Modal>

@code {

    private RenderFragment _icon = @<Icon Type="exclamation-circle" Theme="outline"></Icon>;
}