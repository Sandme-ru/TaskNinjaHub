@page "/calendar"

<style>
    .calendar-container {
        text-align: center;
    }

    .calendar-table {
        width: 100%;
        border-collapse: collapse;
    }

        .calendar-table th,
        .calendar-table td {
            padding: 8px;
            text-align: center;
            border: 1px solid #ccc;
        }

    .today {
        background-color: lightblue;
    }

    .empty-cell {
        background-color: #f9f9f9;
    }

    .month-year-header {
        font-size: 20px;
        font-weight: bold;
        margin-bottom: 10px;
    }

    .navigation-buttons {
        margin-bottom: 10px;
    }

    .arrow-button {
        font-size: 20px;
    }

    .filter-container {
        display: flex;
        align-items: center;
        justify-content: center;
        margin-bottom: 10px;
    }

        .filter-container label {
            margin-right: 10px;
        }

        .filter-container select,
        .filter-container input[type="number"] {
            padding: 5px;
            margin-right: 10px;
        }

        .filter-container button.go-button {
            padding: 5px 10px;
            background-color: #007bff;
            color: white;
            border: none;
            cursor: pointer;
        }

            .filter-container button.go-button:hover {
                background-color: #0056b3;
            }

</style>

<div class="calendar-container">
    <div class="navigation-buttons">
        <a class="arrow-button" @onclick="PreviousMonth">&lt;&lt&lt</a>
        <span class="month-year-header">@CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(_month) @_year</span>
        <a class="arrow-button" @onclick="NextMonth">&gt;&gt;&gt;</a>
    </div>

    <div class="filter-container">
        <label for="month">Select month:</label>
        <select id="month" @onchange="HandleMonthChange">
            @for (var i = 1; i <= 12; i++)
            {
                <option value="@i" selected="@(_month == i)">@CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(i)</option>
            }
        </select>
    
        <label for="year">Enter year:</label>
        <input type="number" id="year" @bind-value="_year" min="1900" max="2100" @oninput="GoToSelectedMonthYear" />
        <button class="go-button" @onclick="GoToSelected">Go</button>
    </div>

    @if (CalendarDays != null)
    {
        <table class="calendar-table">
            <thead>
                <tr>
                    <th>Mon</th>
                    <th>Tue</th>
                    <th>Wed</th>
                    <th>Thu</th>
                    <th>Fri</th>
                    <th>Sat</th>
                    <th>Sun</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var week in CalendarDays)
                {
                    <tr>
                        @foreach (var day in week)
                        {
                            <td class="@(day.IsToday ? "today" : (day.DayNumber == 0 ? "empty-cell" : ""))">@((day.DayNumber == 0) ? "" : day.DayNumber)</td>
                        }
                    </tr>
                }
            </tbody>
        </table>
    }
</div>

@code {
    private class CalendarDay
    {
        public int DayNumber { get; set; }

        public bool IsToday { get; set; }
    }

    private int _year = DateTime.Today.Year;

    private int _month = DateTime.Today.Month;

    private List<List<CalendarDay>> CalendarDays { get; set; } = null!;

    private void GenerateCalendar(int year, int month)
    {
        var daysInMonth = DateTime.DaysInMonth(year, month);
        var firstDayOfMonth = new DateTime(year, month, 1);
        var startingDayOfWeek = (int)firstDayOfMonth.DayOfWeek;
        startingDayOfWeek = (startingDayOfWeek == 0) ? 6 : startingDayOfWeek - 1;

        CalendarDays = [];

        var currentDay = 1;
        for (var i = 0; i < 6; i++)
        {
            var week = new List<CalendarDay>();
            for (var j = 0; j < 7; j++)
            {
                if ((i == 0 && j < startingDayOfWeek) || currentDay > daysInMonth)
                    week.Add(new CalendarDay { DayNumber = 0 });
                else
                {
                    var isToday = currentDay == DateTime.Today.Day && year == DateTime.Today.Year && month == DateTime.Today.Month;
                    week.Add(new CalendarDay { DayNumber = currentDay, IsToday = isToday });
                    currentDay++;
                }
            }
            CalendarDays.Add(week);
            if (currentDay > daysInMonth)
                break;
        }
    }

    private void PreviousMonth()
    {
        if (_month == 1)
        {
            _year--;
            _month = 12;
        }
        else
            _month--;

        GenerateCalendar(_year, _month);
    }

    private void NextMonth()
    {
        if (_month == 12)
        {
            _year++;
            _month = 1;
        }
        else
            _month++;

        GenerateCalendar(_year, _month);
    }

    private void HandleMonthChange(ChangeEventArgs e)
    {
        _month = int.Parse(e.Value?.ToString()!);
        GenerateCalendar(_year, _month);
    }

    private void GoToSelectedMonthYear(ChangeEventArgs e)
    {
        _year = int.Parse(e.Value?.ToString()!);
        GenerateCalendar(_year, _month);
    }

    private void GoToSelected()
    {
        GenerateCalendar(_year, _month);
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        GenerateCalendar(_year, _month);
    }
}
