// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TaskNinjaHub.Persistence;

#nullable disable

namespace TaskNinjaHub.Persistence.ApplicationDbContext
{
    [DbContext(typeof(TaskNinjaHubDbContext))]
    [Migration("20240103201649_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TaskNinjaHub.Application.Entities.Authors.Domain.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_updated");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("RoleName")
                        .HasColumnType("text")
                        .HasColumnName("role_name");

                    b.Property<string>("UserCreated")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("user_created");

                    b.Property<string>("UserUpdated")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("user_updated");

                    b.HasKey("Id")
                        .HasName("pk_authors");

                    b.ToTable("authors", (string)null);
                });

            modelBuilder.Entity("TaskNinjaHub.Application.Entities.Files.Domain.File", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Path")
                        .HasColumnType("text")
                        .HasColumnName("path");

                    b.Property<int?>("TaskId")
                        .HasColumnType("integer")
                        .HasColumnName("task_id");

                    b.HasKey("Id")
                        .HasName("pk_files");

                    b.HasIndex("TaskId")
                        .HasDatabaseName("ix_files_task_id");

                    b.ToTable("files", (string)null);
                });

            modelBuilder.Entity("TaskNinjaHub.Application.Entities.InformationSystems.Domain.InformationSystem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_updated");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("UserCreated")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("user_created");

                    b.Property<string>("UserUpdated")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("user_updated");

                    b.HasKey("Id")
                        .HasName("pk_information_systems");

                    b.ToTable("information_systems", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "The main information system"
                        });
                });

            modelBuilder.Entity("TaskNinjaHub.Application.Entities.Priorities.Domain.Priority", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_priorities");

                    b.ToTable("priorities", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "The highest"
                        },
                        new
                        {
                            Id = 2,
                            Name = "High"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Medium"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Low"
                        });
                });

            modelBuilder.Entity("TaskNinjaHub.Application.Entities.TaskStatuses.Domain.TaskStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_updated");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("UserCreated")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("user_created");

                    b.Property<string>("UserUpdated")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("user_updated");

                    b.HasKey("Id")
                        .HasName("pk_task_statuses");

                    b.ToTable("task_statuses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Awaiting execution"
                        },
                        new
                        {
                            Id = 2,
                            Name = "At work"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Awaiting verification"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Done"
                        });
                });

            modelBuilder.Entity("TaskNinjaHub.Application.Entities.Tasks.Domain.CatalogTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_updated");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int?>("InformationSystemId")
                        .HasColumnType("integer")
                        .HasColumnName("information_system_id");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("name");

                    b.Property<int?>("OriginalTaskId")
                        .HasColumnType("integer")
                        .HasColumnName("original_task_id");

                    b.Property<int?>("PriorityId")
                        .HasColumnType("integer")
                        .HasColumnName("priority_id");

                    b.Property<int?>("TaskAuthorId")
                        .HasColumnType("integer")
                        .HasColumnName("task_author_id");

                    b.Property<int?>("TaskExecutorId")
                        .HasColumnType("integer")
                        .HasColumnName("task_executor_id");

                    b.Property<int?>("TaskStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("task_status_id");

                    b.Property<string>("UserCreated")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("user_created");

                    b.Property<string>("UserUpdated")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("user_updated");

                    b.HasKey("Id")
                        .HasName("pk_catalog_tasks");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_catalog_tasks_id");

                    b.HasIndex("InformationSystemId")
                        .HasDatabaseName("ix_catalog_tasks_information_system_id");

                    b.HasIndex("OriginalTaskId")
                        .HasDatabaseName("ix_catalog_tasks_original_task_id");

                    b.HasIndex("PriorityId")
                        .HasDatabaseName("ix_catalog_tasks_priority_id");

                    b.HasIndex("TaskAuthorId")
                        .HasDatabaseName("ix_catalog_tasks_task_author_id");

                    b.HasIndex("TaskExecutorId")
                        .HasDatabaseName("ix_catalog_tasks_task_executor_id");

                    b.HasIndex("TaskStatusId")
                        .HasDatabaseName("ix_catalog_tasks_task_status_id");

                    b.ToTable("catalog_tasks", (string)null);
                });

            modelBuilder.Entity("TaskNinjaHub.Application.Entities.Files.Domain.File", b =>
                {
                    b.HasOne("TaskNinjaHub.Application.Entities.Tasks.Domain.CatalogTask", "Task")
                        .WithMany("Files")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_files_catalog_tasks_task_id");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("TaskNinjaHub.Application.Entities.Tasks.Domain.CatalogTask", b =>
                {
                    b.HasOne("TaskNinjaHub.Application.Entities.InformationSystems.Domain.InformationSystem", "InformationSystem")
                        .WithMany()
                        .HasForeignKey("InformationSystemId")
                        .HasConstraintName("fk_catalog_tasks_information_systems_information_system_id");

                    b.HasOne("TaskNinjaHub.Application.Entities.Tasks.Domain.CatalogTask", "OriginalTask")
                        .WithMany()
                        .HasForeignKey("OriginalTaskId")
                        .HasConstraintName("fk_catalog_tasks_catalog_tasks_original_task_id");

                    b.HasOne("TaskNinjaHub.Application.Entities.Priorities.Domain.Priority", "Priority")
                        .WithMany()
                        .HasForeignKey("PriorityId")
                        .HasConstraintName("fk_catalog_tasks_priorities_priority_id");

                    b.HasOne("TaskNinjaHub.Application.Entities.Authors.Domain.Author", "TaskAuthor")
                        .WithMany("AssignedTasks")
                        .HasForeignKey("TaskAuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_catalog_tasks_authors_task_author_id");

                    b.HasOne("TaskNinjaHub.Application.Entities.Authors.Domain.Author", "TaskExecutor")
                        .WithMany("ExecutableTasks")
                        .HasForeignKey("TaskExecutorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_catalog_tasks_authors_task_executor_id");

                    b.HasOne("TaskNinjaHub.Application.Entities.TaskStatuses.Domain.TaskStatus", "TaskStatus")
                        .WithMany()
                        .HasForeignKey("TaskStatusId")
                        .HasConstraintName("fk_catalog_tasks_task_statuses_task_status_id");

                    b.Navigation("InformationSystem");

                    b.Navigation("OriginalTask");

                    b.Navigation("Priority");

                    b.Navigation("TaskAuthor");

                    b.Navigation("TaskExecutor");

                    b.Navigation("TaskStatus");
                });

            modelBuilder.Entity("TaskNinjaHub.Application.Entities.Authors.Domain.Author", b =>
                {
                    b.Navigation("AssignedTasks");

                    b.Navigation("ExecutableTasks");
                });

            modelBuilder.Entity("TaskNinjaHub.Application.Entities.Tasks.Domain.CatalogTask", b =>
                {
                    b.Navigation("Files");
                });
#pragma warning restore 612, 618
        }
    }
}
